goog.provide("module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index");
goog.provide("module$object_assign$index");
goog.provide("module$object_assign");
var module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index={};var $jscomp$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index=$jscomp||{};$jscomp$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index.scope={};
$jscomp$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index.arrayIteratorImpl=function(array){var index=0;return function(){if(index<array.length)return{done:false,value:array[index++]};else return{done:true}}};$jscomp$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index.arrayIterator=function(array){return{next:$jscomp$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index.arrayIteratorImpl(array)}};
$jscomp$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index.ASSUME_ES5=false;$jscomp$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index.ASSUME_NO_NATIVE_MAP=false;$jscomp$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index.ASSUME_NO_NATIVE_SET=false;
$jscomp$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index.SIMPLE_FROUND_POLYFILL=false;$jscomp$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index.ISOLATE_POLYFILLS=false;$jscomp$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index.FORCE_POLYFILL_PROMISE=false;
$jscomp$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index.FORCE_POLYFILL_PROMISE_WHEN_NO_UNHANDLED_REJECTION=false;
$jscomp$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index.defineProperty=$jscomp$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index.ASSUME_ES5||typeof Object.defineProperties=="function"?Object.defineProperty:function(target,property,descriptor){if(target==Array.prototype||target==Object.prototype)return target;target[property]=descriptor.value;return target};
$jscomp$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index.getGlobal=function(passedInThis){var possibleGlobals=["object"==typeof globalThis&&globalThis,passedInThis,"object"==typeof window&&window,"object"==typeof self&&self,"object"==typeof global&&global];for(var i=0;i<possibleGlobals.length;++i){var maybeGlobal=possibleGlobals[i];if(maybeGlobal&&maybeGlobal["Math"]==Math)return maybeGlobal}return{valueOf:function(){throw new Error("Cannot find global object");
}}.valueOf()};$jscomp$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index.global=$jscomp$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index.getGlobal(this);$jscomp$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index.IS_SYMBOL_NATIVE=typeof Symbol==="function"&&typeof Symbol("x")==="symbol";
$jscomp$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index.TRUST_ES6_POLYFILLS=!$jscomp$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index.ISOLATE_POLYFILLS||$jscomp$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index.IS_SYMBOL_NATIVE;
$jscomp$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index.polyfills={};$jscomp$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index.propertyToPolyfillSymbol={};$jscomp$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index.POLYFILL_PREFIX="$jscp$";
var $jscomp$lookupPolyfilledValue$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index=function(target,property){var obfuscatedName=$jscomp$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index.propertyToPolyfillSymbol[property];if(obfuscatedName==null)return target[property];var polyfill=target[obfuscatedName];return polyfill!==undefined?polyfill:target[property]};
$jscomp$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index.polyfill=function(target,polyfill,fromLang,toLang){if(!polyfill)return;if($jscomp$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index.ISOLATE_POLYFILLS)$jscomp$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index.polyfillIsolated(target,polyfill,fromLang,toLang);else $jscomp$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index.polyfillUnisolated(target,
polyfill,fromLang,toLang)};
$jscomp$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index.polyfillUnisolated=function(target,polyfill,fromLang,toLang){var obj=$jscomp$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index.global;var split=target.split(".");for(var i=0;i<split.length-1;i++){var key=split[i];if(!(key in obj))return;obj=obj[key]}var property=split[split.length-1];var orig=obj[property];var impl=polyfill(orig);if(impl==
orig||impl==null)return;$jscomp$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index.defineProperty(obj,property,{configurable:true,writable:true,value:impl})};
$jscomp$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index.polyfillIsolated=function(target,polyfill,fromLang,toLang){var split=target.split(".");var isSimpleName=split.length===1;var root=split[0];var ownerObject;if(!isSimpleName&&root in $jscomp$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index.polyfills)ownerObject=$jscomp$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index.polyfills;
else ownerObject=$jscomp$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index.global;for(var i=0;i<split.length-1;i++){var key=split[i];if(!(key in ownerObject))return;ownerObject=ownerObject[key]}var property=split[split.length-1];var nativeImpl=$jscomp$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index.IS_SYMBOL_NATIVE&&fromLang==="es6"?ownerObject[property]:null;var impl=polyfill(nativeImpl);
if(impl==null)return;if(isSimpleName)$jscomp$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index.defineProperty($jscomp$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index.polyfills,property,{configurable:true,writable:true,value:impl});else if(impl!==nativeImpl){if($jscomp$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index.propertyToPolyfillSymbol[property]===
undefined)$jscomp$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index.propertyToPolyfillSymbol[property]=$jscomp$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index.IS_SYMBOL_NATIVE?$jscomp$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index.global["Symbol"](property):$jscomp$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index.POLYFILL_PREFIX+
property;var obfuscatedName=$jscomp$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index.propertyToPolyfillSymbol[property];$jscomp$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index.defineProperty(ownerObject,obfuscatedName,{configurable:true,writable:true,value:impl})}};$jscomp$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index.initSymbol=function(){};
$jscomp$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index.polyfill("Symbol",function(orig){if(orig)return orig;var SymbolClass=function(id,opt_description){this.$jscomp$symbol$id_=id;this.description;$jscomp$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index.defineProperty(this,"description",{configurable:true,writable:true,value:opt_description})};SymbolClass.prototype.toString=function(){return this.$jscomp$symbol$id_};
var SYMBOL_PREFIX="jscomp_symbol_";var counter=0;var symbolPolyfill=function(opt_description){if(this instanceof symbolPolyfill)throw new TypeError("Symbol is not a constructor");return new SymbolClass(SYMBOL_PREFIX+(opt_description||"")+"_"+counter++,opt_description)};return symbolPolyfill},"es6","es3");
$jscomp$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index.polyfill("Symbol.iterator",function(orig){if(orig)return orig;var symbolIterator=Symbol("Symbol.iterator");var arrayLikes=["Array","Int8Array","Uint8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array"];for(var i=0;i<arrayLikes.length;i++){var ArrayLikeCtor=$jscomp$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index.global[arrayLikes[i]];
if(typeof ArrayLikeCtor==="function"&&typeof ArrayLikeCtor.prototype[symbolIterator]!="function")$jscomp$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index.defineProperty(ArrayLikeCtor.prototype,symbolIterator,{configurable:true,writable:true,value:function(){return $jscomp$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index.iteratorPrototype($jscomp$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index.arrayIteratorImpl(this))}})}return symbolIterator},
"es6","es3");$jscomp$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index.polyfill("Symbol.asyncIterator",function(orig){if(orig)return orig;return Symbol("Symbol.asyncIterator")},"es9","es3");$jscomp$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index.iteratorPrototype=function(next){var iterator={next:next};iterator[Symbol.iterator]=function(){return this};return iterator};
var getOwnPropertySymbols$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index=Object.getOwnPropertySymbols;var hasOwnProperty$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index=Object.prototype.hasOwnProperty;var propIsEnumerable$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index=Object.prototype.propertyIsEnumerable;
function toObject$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index(val){if(val===null||val===undefined)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(val)}
function shouldUseNative$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index(){try{if(!Object.assign)return false;var test1=new String("abc");test1[5]="de";if(Object.getOwnPropertyNames(test1)[0]==="5")return false;var test2={};for(var i=0;i<10;i++)test2["_"+String.fromCharCode(i)]=i;var order2=Object.getOwnPropertyNames(test2).map(function(n){return test2[n]});if(order2.join("")!=="0123456789")return false;var test3={};"abcdefghijklmnopqrst".split("").forEach(function(letter){test3[letter]=
letter});if(Object.keys(Object.assign({},test3)).join("")!=="abcdefghijklmnopqrst")return false;return true}catch(err){return false}}
module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index["default"]=shouldUseNative$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index()?Object.assign:function(target,source){var from;var to=toObject$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index(target);var symbols;for(var s=1;s<arguments.length;s++){from=Object(arguments[s]);for(var key in from)if(hasOwnProperty$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index.call(from,
key))to[key]=from[key];if(getOwnPropertySymbols$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index){symbols=getOwnPropertySymbols$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index(from);for(var i=0;i<symbols.length;i++)if(propIsEnumerable$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$object_assign$index.call(from,symbols[i]))to[symbols[i]]=from[symbols[i]]}}return to}
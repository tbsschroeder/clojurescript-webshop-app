goog.provide("module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$scheduler$cjs$scheduler_tracing_development");
goog.provide("module$scheduler$cjs$scheduler_tracing_development");
var module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$scheduler$cjs$scheduler_tracing_development={"default":{}};
if(process.env.NODE_ENV!=="production")(function(){var DEFAULT_THREAD_ID=0;var interactionIDCounter=0;var threadIDCounter=0;module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$scheduler$cjs$scheduler_tracing_development["default"].__interactionsRef=null;module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$scheduler$cjs$scheduler_tracing_development["default"].__subscriberRef=null;{module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$scheduler$cjs$scheduler_tracing_development["default"].__interactionsRef=
{current:new Set};module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$scheduler$cjs$scheduler_tracing_development["default"].__subscriberRef={current:null}}function unstable_clear(callback){var prevInteractions=module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$scheduler$cjs$scheduler_tracing_development["default"].__interactionsRef.current;module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$scheduler$cjs$scheduler_tracing_development["default"].__interactionsRef.current=
new Set;try{return callback()}finally{module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$scheduler$cjs$scheduler_tracing_development["default"].__interactionsRef.current=prevInteractions}}function unstable_getCurrent(){{return module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$scheduler$cjs$scheduler_tracing_development["default"].__interactionsRef.current}}function unstable_getThreadID(){return++threadIDCounter}function unstable_trace(name,
timestamp,callback){var threadID=arguments.length>3&&arguments[3]!==undefined?arguments[3]:DEFAULT_THREAD_ID;var interaction={__count:1,id:interactionIDCounter++,name:name,timestamp:timestamp};var prevInteractions=module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$scheduler$cjs$scheduler_tracing_development["default"].__interactionsRef.current;var interactions=new Set(prevInteractions);interactions.add(interaction);module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$scheduler$cjs$scheduler_tracing_development["default"].__interactionsRef.current=
interactions;var subscriber=module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$scheduler$cjs$scheduler_tracing_development["default"].__subscriberRef.current;var returnValue;try{if(subscriber!==null)subscriber.onInteractionTraced(interaction)}finally{try{if(subscriber!==null)subscriber.onWorkStarted(interactions,threadID)}finally{try{returnValue=callback()}finally{module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$scheduler$cjs$scheduler_tracing_development["default"].__interactionsRef.current=
prevInteractions;try{if(subscriber!==null)subscriber.onWorkStopped(interactions,threadID)}finally{interaction.__count--;if(subscriber!==null&&interaction.__count===0)subscriber.onInteractionScheduledWorkCompleted(interaction)}}}}return returnValue}function unstable_wrap(callback){var threadID=arguments.length>1&&arguments[1]!==undefined?arguments[1]:DEFAULT_THREAD_ID;var wrappedInteractions=module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$scheduler$cjs$scheduler_tracing_development["default"].__interactionsRef.current;
var subscriber=module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$scheduler$cjs$scheduler_tracing_development["default"].__subscriberRef.current;if(subscriber!==null)subscriber.onWorkScheduled(wrappedInteractions,threadID);wrappedInteractions.forEach(function(interaction){interaction.__count++});var hasRun=false;function wrapped(){var prevInteractions=module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$scheduler$cjs$scheduler_tracing_development["default"].__interactionsRef.current;
module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$scheduler$cjs$scheduler_tracing_development["default"].__interactionsRef.current=wrappedInteractions;subscriber=module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$scheduler$cjs$scheduler_tracing_development["default"].__subscriberRef.current;try{var returnValue;try{if(subscriber!==null)subscriber.onWorkStarted(wrappedInteractions,threadID)}finally{try{returnValue=callback.apply(undefined,
arguments)}finally{module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$scheduler$cjs$scheduler_tracing_development["default"].__interactionsRef.current=prevInteractions;if(subscriber!==null)subscriber.onWorkStopped(wrappedInteractions,threadID)}}return returnValue}finally{if(!hasRun){hasRun=true;wrappedInteractions.forEach(function(interaction){interaction.__count--;if(subscriber!==null&&interaction.__count===0)subscriber.onInteractionScheduledWorkCompleted(interaction)})}}}
wrapped.cancel=function cancel(){subscriber=module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$scheduler$cjs$scheduler_tracing_development["default"].__subscriberRef.current;try{if(subscriber!==null)subscriber.onWorkCanceled(wrappedInteractions,threadID)}finally{wrappedInteractions.forEach(function(interaction){interaction.__count--;if(subscriber&&interaction.__count===0)subscriber.onInteractionScheduledWorkCompleted(interaction)})}};return wrapped}var subscribers=
null;{subscribers=new Set}function unstable_subscribe(subscriber){{subscribers.add(subscriber);if(subscribers.size===1)module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$scheduler$cjs$scheduler_tracing_development["default"].__subscriberRef.current={onInteractionScheduledWorkCompleted:onInteractionScheduledWorkCompleted,onInteractionTraced:onInteractionTraced,onWorkCanceled:onWorkCanceled,onWorkScheduled:onWorkScheduled,onWorkStarted:onWorkStarted,onWorkStopped:onWorkStopped}}}
function unstable_unsubscribe(subscriber){{subscribers["delete"](subscriber);if(subscribers.size===0)module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$scheduler$cjs$scheduler_tracing_development["default"].__subscriberRef.current=null}}function onInteractionTraced(interaction){var didCatchError=false;var caughtError=null;subscribers.forEach(function(subscriber){try{subscriber.onInteractionTraced(interaction)}catch(error){if(!didCatchError){didCatchError=true;caughtError=
error}}});if(didCatchError)throw caughtError;}function onInteractionScheduledWorkCompleted(interaction){var didCatchError=false;var caughtError=null;subscribers.forEach(function(subscriber){try{subscriber.onInteractionScheduledWorkCompleted(interaction)}catch(error){if(!didCatchError){didCatchError=true;caughtError=error}}});if(didCatchError)throw caughtError;}function onWorkScheduled(interactions,threadID){var didCatchError=false;var caughtError=null;subscribers.forEach(function(subscriber){try{subscriber.onWorkScheduled(interactions,
threadID)}catch(error){if(!didCatchError){didCatchError=true;caughtError=error}}});if(didCatchError)throw caughtError;}function onWorkStarted(interactions,threadID){var didCatchError=false;var caughtError=null;subscribers.forEach(function(subscriber){try{subscriber.onWorkStarted(interactions,threadID)}catch(error){if(!didCatchError){didCatchError=true;caughtError=error}}});if(didCatchError)throw caughtError;}function onWorkStopped(interactions,threadID){var didCatchError=false;var caughtError=null;
subscribers.forEach(function(subscriber){try{subscriber.onWorkStopped(interactions,threadID)}catch(error){if(!didCatchError){didCatchError=true;caughtError=error}}});if(didCatchError)throw caughtError;}function onWorkCanceled(interactions,threadID){var didCatchError=false;var caughtError=null;subscribers.forEach(function(subscriber){try{subscriber.onWorkCanceled(interactions,threadID)}catch(error){if(!didCatchError){didCatchError=true;caughtError=error}}});if(didCatchError)throw caughtError;}module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$scheduler$cjs$scheduler_tracing_development["default"].unstable_clear=
unstable_clear;module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$scheduler$cjs$scheduler_tracing_development["default"].unstable_getCurrent=unstable_getCurrent;module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$scheduler$cjs$scheduler_tracing_development["default"].unstable_getThreadID=unstable_getThreadID;module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$scheduler$cjs$scheduler_tracing_development["default"].unstable_subscribe=
unstable_subscribe;module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$scheduler$cjs$scheduler_tracing_development["default"].unstable_trace=unstable_trace;module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$scheduler$cjs$scheduler_tracing_development["default"].unstable_unsubscribe=unstable_unsubscribe;module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$scheduler$cjs$scheduler_tracing_development["default"].unstable_wrap=
unstable_wrap})()
goog.provide("module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$prop_types$checkPropTypes");
goog.provide("module$prop_types$checkPropTypes");
goog.require("module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$prop_types$lib$ReactPropTypesSecret");
var module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$prop_types$checkPropTypes={};
module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$prop_types$checkPropTypes["default"]=function(typeSpecs,values,location,componentName,getStack){if(process.env.NODE_ENV!=="production")for(var typeSpecName in typeSpecs)if(has$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$prop_types$checkPropTypes(typeSpecs,typeSpecName)){var error;try{if(typeof typeSpecs[typeSpecName]!=="function"){var err=Error((componentName||"React class")+
": "+location+" type `"+typeSpecName+"` is invalid; "+"it must be a function, usually from the `prop-types` package, but received `"+typeof typeSpecs[typeSpecName]+"`.");err.name="Invariant Violation";throw err;}error=typeSpecs[typeSpecName](values,typeSpecName,componentName,location,null,module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$prop_types$lib$ReactPropTypesSecret["default"])}catch(ex){error=ex}if(error&&!(error instanceof Error))printWarning$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$prop_types$checkPropTypes((componentName||
"React class")+": type specification of "+location+" `"+typeSpecName+"` is invalid; the type checker "+"function must return `null` or an `Error` but returned a "+typeof error+". "+"You may have forgotten to pass an argument to the type checker "+"creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and "+"shape all require an argument).");if(error instanceof Error&&!(error.message in loggedTypeFailures$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$prop_types$checkPropTypes)){loggedTypeFailures$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$prop_types$checkPropTypes[error.message]=
true;var stack=getStack?getStack():"";printWarning$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$prop_types$checkPropTypes("Failed "+location+" type: "+error.message+(stack!=null?stack:""))}}};var printWarning$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$prop_types$checkPropTypes=function(){};
if(process.env.NODE_ENV!=="production"){var ReactPropTypesSecret$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$prop_types$checkPropTypes=module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$prop_types$lib$ReactPropTypesSecret["default"];var loggedTypeFailures$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$prop_types$checkPropTypes={};var has$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$prop_types$checkPropTypes=
Function.call.bind(Object.prototype.hasOwnProperty);printWarning$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$prop_types$checkPropTypes=function(text){var message="Warning: "+text;if(typeof console!=="undefined")console.error(message);try{throw new Error(message);}catch(x$0){}}}
module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$prop_types$checkPropTypes["default"].resetWarningCache=function(){if(process.env.NODE_ENV!=="production")loggedTypeFailures$$module$home$tobias$Dokumente$playground$ClojureProjects$clojurescript$node_modules$prop_types$checkPropTypes={}}